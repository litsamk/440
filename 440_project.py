# -*- coding: utf-8 -*-
"""440_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cPsE0CUqKPyaIX_e6l0LxvGBSjY3YsOY

# Identification of potential drug targets for acute chemotherapy cardiotoxicities using bulk-RNAseq data
Harshit Bhasin and Litsa Kapsalis
"""

import os

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')
os.chdir('/content/drive/My Drive/Colab Notebooks')

!pip install anndata
!pip install scanpy
!pip install pydeseq2
!pip install igraph
!pip install leidenalg
!pip install mygene
!pip install gseapy

import pandas as pd
import numpy as np
import scipy as sc
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import anndata as ad
import scanpy as sc
import umap
import pydeseq2
from pydeseq2.preprocessing import deseq2_norm
from pydeseq2.dds import DeseqDataSet
from pydeseq2.ds import DeseqStats
from mygene import MyGeneInfo
import gseapy as gp

"""# Preprocessing and data loading"""

#Loading the data and creating the samples and
data = pd.read_csv('GSE217421_raw_counts_GRCh38.p13_NCBI.tsv', sep ='\t', index_col = 0).T
samples = pd.DataFrame(data.index, columns = ['Sample Name '])
expression = data.reset_index(drop = True)

#Filling out the samples info dataframe
sample_data = pd.read_excel('Sample_reference.xlsx')
drug_data = pd.read_csv('Drug_reference.txt', sep ='\t')
sample_drug_merge = pd.merge(sample_data, drug_data, left_on = 'Drug', right_on = 'Drug abbreviation')
final_sample_data = pd.merge(samples, sample_drug_merge, on = 'Sample Name ')
final_sample_data =final_sample_data.set_index('Sample Name ')

#Subsetting the expression data
relevant_samples = final_sample_data.index.tolist()
data_relevant = data[data.index.isin(relevant_samples)]
final_sample_data = final_sample_data.reindex(data_relevant.index)

#Normalizing the counts matrix (data_relevant)
data_normalized = deseq2_norm(data_relevant)[0]
size_factors = deseq2_norm(data_relevant)[1]

#Making the anndata objects
analysis_object = sc.AnnData(X = data_normalized, obs = final_sample_data)
analysis_object.layers['raw_counts'] = data_relevant
analysis_object.layers['normalized_counts'] = analysis_object.X.copy()
analysis_TKI_Anthracyclines = analysis_object[(analysis_object.obs['Drug class'] == 'Kinase_inhibitor') | (analysis_object.obs['Drug class'] == 'Anthracycline') | (analysis_object.obs['Drug class'] == 'Control')].copy()
analysis_TKI = analysis_object[(analysis_object.obs['Drug class'] == 'Kinase_inhibitor') | (analysis_object.obs['Drug class'] == 'Control')].copy()
analysis_Anthracyclines = analysis_object[(analysis_object.obs['Drug class'] == 'Anthracycline') | (analysis_object.obs['Drug class'] == 'Control')].copy()

label_list = data_relevant.columns.tolist()

"""# Full dataset"""

#PCA for every single drug and drug type in the dataset
sc.pp.scale(analysis_object)
sc.tl.pca(analysis_object)
sc.pl.pca(analysis_object, components = [('1,2'), ('2,3')], color=['Drug name', 'Drug class', 'Is_cardiotoxic', 'Cell line'], ncols = 2, wspace = 0.8)

# doing umap projections
sc.pp.neighbors(analysis_object, use_rep = 'X_pca')
sc.tl.umap(analysis_object)

sc.pl.umap(analysis_object, color = ['Drug class', 'Cell line', 'Is_cardiotoxic', 'Drug name'], size = 100, ncols = 2, wspace = 0.4)





sc.tl.leiden(analysis_object, resolution=1.0)
sc.pl.umap(analysis_object, color='leiden')

"""# TKIs and Anthracyclines only"""

#running PCA
sc.pp.scale(analysis_TKI_Anthracyclines)
sc.tl.pca(analysis_TKI_Anthracyclines)
sc.pl.pca(analysis_TKI_Anthracyclines, components = [('1,2'), ('2,3')], color=['Drug name', 'Drug class', 'Is_cardiotoxic', 'Cell line'],
          ncols = 2, wspace = 0.5)

# doing umap projections
sc.pp.neighbors(analysis_TKI_Anthracyclines, use_rep = 'X_pca')
sc.tl.umap(analysis_TKI_Anthracyclines)
sc.pl.umap(analysis_TKI_Anthracyclines, color = ['Drug class', 'Cell line', 'Is_cardiotoxic', 'Drug name'], size = 100, ncols = 2, wspace = 0.3)

sc.tl.leiden(analysis_TKI_Anthracyclines, resolution=0.5)
sc.pl.umap(analysis_TKI_Anthracyclines, color='leiden')

drugname_df = analysis_TKI_Anthracyclines.obs[['leiden', 'Drug name']]
pivot = pd.crosstab(drugname_df['Drug name'], drugname_df['leiden'])
pivot.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='tab20')
cellline_df = analysis_TKI_Anthracyclines.obs[['leiden', 'Cell line']]
pivot2 = pd.crosstab(cellline_df['Cell line'], cellline_df['leiden'])
pivot2.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='tab20')
drugclass_df = analysis_TKI_Anthracyclines.obs[['leiden', 'Drug class']]
pivot3 = pd.crosstab(drugclass_df['Drug class'], drugclass_df['leiden'])
pivot3.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='tab20')

"""# Anthracyclines only"""

#running PCA
sc.pp.scale(analysis_Anthracyclines)
sc.tl.pca(analysis_Anthracyclines)
sc.pl.pca(analysis_Anthracyclines, components = [('1,2'), ('2,3')], color=['Drug name', 'Drug class', 'Cell line'], ncols = 2, wspace = 0.3, size = 100)

# doing umap projections
sc.pp.neighbors(analysis_Anthracyclines, use_rep = 'X_pca', metric = 'cosine')
sc.tl.umap(analysis_Anthracyclines)
sc.tl.leiden(analysis_Anthracyclines, resolution=0.3)
sc.pl.umap(analysis_Anthracyclines, color = ['Drug class', 'Cell line', 'Drug name', 'leiden'], size = 100, ncols = 2, wspace = 0.3)

drugname_df = analysis_Anthracyclines.obs[['leiden', 'Drug name']]
pivot = pd.crosstab(drugname_df['Drug name'], drugname_df['leiden'])
pivot.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='Set1')
cellline_df = analysis_Anthracyclines.obs[['leiden', 'Cell line']]
pivot2 = pd.crosstab(cellline_df['Cell line'], cellline_df['leiden'])
pivot2.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='Set1')
pivot3 = pd.crosstab(cellline_df['leiden'], cellline_df['Cell line'])
pivot3.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='Set1')

"""# TKI only"""

#running PCA
sc.pp.scale(analysis_TKI)
sc.tl.pca(analysis_TKI)
sc.pl.pca(analysis_TKI, components = [('1,2'), ('2,3')], color=['Drug name', 'Drug class', 'Is_cardiotoxic', 'Cell line'], ncols = 2, wspace = 0.5)

# doing umap projections
sc.pp.neighbors(analysis_TKI, use_rep = 'X_pca')
sc.tl.umap(analysis_TKI)
sc.pl.umap(analysis_TKI, color = ['Drug class', 'Cell line', 'Is_cardiotoxic', 'Drug name'], size = 100, ncols = 2, wspace = 0.3)

sc.tl.leiden(analysis_TKI, resolution=0.8)
sc.pl.umap(analysis_TKI, color='leiden', size = 100)

drugname_df = analysis_TKI.obs[['leiden', 'Drug name']]
pivot = pd.crosstab(drugname_df['Drug name'], drugname_df['leiden'])
pivot.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='tab20')
cellline_df = analysis_TKI.obs[['leiden', 'Cell line']]
pivot2 = pd.crosstab(cellline_df['Cell line'], cellline_df['leiden'])
pivot2.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='tab20')
pivot3 = pd.crosstab(drugname_df['leiden'], drugname_df['Drug name'])
pivot3.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='tab20')
pivot4 = pd.crosstab(cellline_df['leiden'], cellline_df['Cell line'])
pivot4.plot(kind='bar', stacked=True, figsize=(8, 6), colormap='tab20')

"""# Anthracycline deSeq"""

drug_name_and_leiden = DeseqDataSet(counts = analysis_Anthracyclines.layers['raw_counts'], metadata = analysis_Anthracyclines.obs, design_factors = ["`Drug name`", "leiden"])
drug_name_and_leiden.deseq2()

def diffexp(info, variable, condition1, condition2):
    stat = DeseqStats(info, contrast=(variable, condition1, condition2))
    stat.summary()

    stat_df = stat.results_df.copy()
    stat_df.insert(0, 'Geneid', label_list)

    # Initialize MyGeneInfo
    mg = MyGeneInfo()
    # If your gene IDs are in the first column of df:
    gene_ids = stat_df.iloc[:, 0].tolist()
    # Query MyGene.info
    results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')
   # Convert results to DataFrame
    results_df = pd.DataFrame(results)
    # Some IDs may not be mapped â€” filter out errors or NaNs
    results_df = results_df[['query', 'symbol']].dropna()
    # Rename columns for merging
    results_df.columns = ['Geneid', 'Symbol']
    stat_df[stat_df.columns[0]] = stat_df[stat_df.columns[0]].astype(str)
    results_df['Geneid'] = results_df['Geneid'].astype(str)
    # Now merge safely
    stat_df_labeled = stat_df.merge(results_df, left_on=stat_df.columns[0], right_on='Geneid', how='left')
    stat_df_labeled.dropna(subset = 'Symbol', inplace = True)
    filtered = stat_df_labeled[stat_df_labeled.baseMean >= 10]
    sigs = filtered[(filtered.padj < 0.05) & (abs(filtered.log2FoldChange) > 1)]

    return stat_df_labeled, filtered, sigs

# daun v dox
[results_daun_dox, filtered_daun_dox, sig_daun_dox] = diffexp(drug_name_and_leiden, 'Drug name', 'daunorubicin', 'doxorubicin')
# dox v ctrl
[results_dox, filtered_dox, sig_dox] = diffexp(drug_name_and_leiden, 'Drug name', 'doxorubicin', 'Control')
# daun v ctrl
[results_daun, filtered_daun, sig_daun] = diffexp(drug_name_and_leiden, 'Drug name', 'daunorubicin', 'Control')
# ida v ctrl
[results_ida, filtered_ida, sig_ida] = diffexp(drug_name_and_leiden, 'Drug name', 'idarubicin', 'Control')
# epi v ctrl
[results_epi, filtered_epi, sig_epi] = diffexp(drug_name_and_leiden, 'Drug name', 'epirubicin', 'Control')
# ida v dox + daun
[results_ida_doxdaun, filtered_ida_doxdaun, sig_ida_doxdaun] = diffexp(drug_name_and_leiden, 'leiden', '2', '1')
# dox + daun v epi
[results_epi_doxdaun, filtered_epi_doxdaun, sig_epi_doxdaun] = diffexp(drug_name_and_leiden, 'leiden', '3', '1')
# ida v dox
[results_ida_dox, filtered_ida_dox, sig_ida_dox] = diffexp(drug_name_and_leiden, 'Drug name', 'idarubicin', 'doxorubicin')
# dox v epi
[results_epi_dox, filtered_epi_dox, sig_epi_dox] = diffexp(drug_name_and_leiden, 'Drug name', 'epirubicin', 'doxorubicin')
# dox + daun v ctrl
[results_doxdaun_ctrl, filtered_doxdaun_ctrl, sig_doxdaun_ctrl] = diffexp(drug_name_and_leiden, 'leiden', '1', '0')



"""GSEA"""

def gsea_run(result_df):
  result_df_copy  = result_df.copy()
  ranking = result_df_copy [['Symbol', 'stat']].dropna().sort_values(by = 'stat', ascending = False)
  ranking.drop_duplicates(subset = ['Symbol'], inplace = True)
  pre_res = gp.prerank(rnk = ranking, gene_sets = 'GO_Biological_Process_2025', seed = 6, permutation_num = 100)
  out = []
  for item in list(pre_res.results):
    out.append([item, pre_res.results[item]['fdr'],
                        pre_res.results[item]['es'],
                        pre_res.results[item]['nes'],
                        pre_res.results[item]['pval'],
                        pre_res.results[item]['lead_genes']
                    ])

  out = pd.DataFrame(out, columns = ['Term','fdr', 'es', 'nes', 'pval', 'lead_genes']).sort_values('fdr').reset_index(drop = True)
  return out

gsea_daun_dox = gsea_run(results_daun_dox)
gsea_dox = gsea_run(results_dox)
gsea_daun = gsea_run(results_daun)
gsea_ida = gsea_run(results_ida)
gsea_epi = gsea_run(results_epi)
gsea_ida_doxdaun = gsea_run(results_ida_doxdaun)
gsea_epi_doxdaun = gsea_run(results_epi_doxdaun)
gsea_ida_dox = gsea_run(results_ida_dox)
gsea_epi_dox = gsea_run(results_epi_dox)
gsea_doxdaun_ctrl = gsea_run(results_doxdaun_ctrl)

gsea_daun_dox_filtered = gsea_daun_dox[gsea_daun_dox.fdr < 0.05].sort_values(by ='nes')
gsea_dox_filtered = gsea_dox[gsea_dox.fdr < 0.05].sort_values(by ='nes')
gsea_daun_filtered = gsea_daun[gsea_daun.fdr < 0.05].sort_values(by ='nes')
gsea_ida_filtered = gsea_ida[gsea_ida.fdr < 0.05].sort_values(by ='nes')
gsea_epi_filtered = gsea_epi[gsea_epi.fdr < 0.05].sort_values(by ='nes')
gsea_ida_doxdaun_filtered = gsea_ida_doxdaun[gsea_ida_doxdaun.fdr < 0.05].sort_values(by ='nes')
gsea_epi_doxdaun_filtered = gsea_epi_doxdaun[gsea_epi_doxdaun.fdr < 0.05].sort_values(by ='nes')
gsea_ida_dox_filtered = gsea_ida_dox[gsea_ida_dox.fdr < 0.05].sort_values(by ='nes')
gsea_epi_dox_filtered = gsea_epi_dox[gsea_epi_dox.fdr < 0.05].sort_values(by ='nes')
gsea_doxdaun_ctrl_filtered = gsea_doxdaun_ctrl[gsea_doxdaun_ctrl.fdr < 0.05].sort_values(by ='nes')

#Making a heatmap of term enrichment from Dox v Ctrl terms in all drugs v ctrl

dox_terms_list =  gsea_dox_filtered.Term.to_list()
dox_terms_nes_dox = gsea_dox[gsea_dox['Term'].isin(dox_terms_list)][['Term', 'nes']].rename(columns = {'nes': 'Doxorubicin'})
dox_terms_nes_daun = gsea_daun[gsea_daun['Term'].isin(dox_terms_list)][['Term', 'nes']].rename(columns = {'nes': 'Daunorubicin'})
dox_terms_nes_ida = gsea_ida[gsea_ida['Term'].isin(dox_terms_list)][['Term', 'nes']].rename(columns = {'nes': 'Idarubicin'})
dox_terms_nes_epi = gsea_epi[gsea_epi['Term'].isin(dox_terms_list)][['Term', 'nes']].rename(columns = {'nes': 'Epirubicin'})
dox_terms_df = dox_terms_nes_dox.merge(dox_terms_nes_daun, on = 'Term', how = 'outer').merge(dox_terms_nes_epi, on = 'Term', how = 'outer').merge(dox_terms_nes_ida, on = 'Term', how = 'outer')
dox_terms_df.set_index('Term', inplace = True)

plt.figure(figsize=(10, 8))
sns.heatmap(dox_terms_df, linewidths = 0.1, annot = True)
plt.title('Normalized Enrichment Score v Control')

plt.barh(gsea_dox_filtered_tops['Term'], gsea_dox_filtered_tops['nes'])

#output all GSEA files
gsea_daun_dox_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_daun_dox_filtered.csv', index=False)
gsea_dox_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_dox_filtered.csv', index=False)
gsea_daun_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_daun_filtered.csv', index=False)
gsea_ida_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_daun_ida_filtered.csv', index=False)
gsea_epi_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_daun_epi_filtered.csv', index=False)
gsea_ida_doxdaun_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_ida_doxdaun_filtered.csv', index=False)
gsea_epi_doxdaun_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_epi_doxdaun_filtered.csv', index=False)
gsea_ida_dox_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_ida_dox_filtered.csv', index=False)
gsea_epi_dox_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_epi_dox_filtered.csv', index=False)
gsea_doxdaun_ctrl_filtered.to_csv('/content/drive/My Drive/Colab Notebooks/gsea_doxdaun_ctrl_filtered.csv', index=False)

#output all DEG lists
sig_daun_dox.to_csv('/content/drive/My Drive/Colab Notebooks/sig_daun_dox.csv', index=False)
sig_dox.to_csv('/content/drive/My Drive/Colab Notebooks/sig_dox.csv', index=False)
sig_daun.to_csv('/content/drive/My Drive/Colab Notebooks/sig_daun.csv', index=False)
sig_ida.to_csv('/content/drive/My Drive/Colab Notebooks/sig_ida.csv', index=False)
sig_epi.to_csv('/content/drive/My Drive/Colab Notebooks/sig_epi.csv', index=False)
sig_ida_doxdaun.to_csv('/content/drive/My Drive/Colab Notebooks/sig_ida_doxdaun.csv', index=False)
sig_epi_doxdaun.to_csv('/content/drive/My Drive/Colab Notebooks/sig_epi_doxdaun.csv', index=False)
sig_ida_dox.to_csv('/content/drive/My Drive/Colab Notebooks/sig_ida_dox.csv', index=False)
sig_epi_dox.to_csv('/content/drive/My Drive/Colab Notebooks/sig_epi_dox.csv', index=False)
sig_doxdaun_ctrl.to_csv('/content/drive/My Drive/Colab Notebooks/sig_doxdaun_ctrl.csv', index=False)







"""#Screwing around"""

drug_name_and_leiden = DeseqDataSet(counts = analysis_Anthracyclines.layers['raw_counts'], metadata = analysis_Anthracyclines.obs, design_factors = ["`Drug name`", "leiden"])

drug_name_and_leiden.deseq2()

# Comparing Dox v Daun
stat_dox_dau = DeseqStats(drug_name_and_leiden, contrast=('Drug name', 'doxorubicin', 'daunorubicin'))
stat_dox_dau.summary()

#check to make sure validity of this
stat_dox_dau_df = stat_dox_dau.results_df.copy()
stat_dox_dau_df.insert(0, 'Geneid', label_list)

stat_dox_dau_df

!pip install sanbomics

from sanbomics.tools import id_map
mapper = id_map(species = 'human')
print(mapper.mapper)
stat_dox_dau_df['Symbol'] = stat_dox_dau_df.index.map(mapper.mapper)
#stat_dox_dau_df

!pip install mygene

from mygene import MyGeneInfo

# Initialize MyGeneInfo
mg = MyGeneInfo()

# If your gene IDs are in the first column of df:
gene_ids = stat_dox_dau_df.iloc[:, 0].tolist()

# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')

# Convert results to DataFrame
results_df = pd.DataFrame(results)

# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()

# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']

stat_dox_dau_df[stat_dox_dau_df.columns[0]] = stat_dox_dau_df[stat_dox_dau_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)

# Now merge safely
stat_dox_dau_df_labeled = stat_dox_dau_df.merge(results_df, left_on=stat_dox_dau_df.columns[0], right_on='Geneid', how='left')

#optinally drop the merge key if redundant
#stat_dox_dau_df.drop(columns='Geneid', inplace=True)

# Now merge safely
#stat_dox_dau_df_labeled.rename(columns={'Symbol_y': 'Symbol'}, inplace=True)
#stat_dox_dau_df_labeled = stat_dox_dau_df_labeled.drop(columns=['Symbol_x'])

stat_dox_dau_df_labeled

filtered_dox_dau = stat_dox_dau_df_labeled[stat_dox_dau_df_labeled.baseMean >= 10]

filtered_dox_dau

sigs = filtered_dox_dau[(filtered_dox_dau.padj < 0.05) & (abs(filtered_dox_dau.log2FoldChange) > 1)]
sigs

plt.figure(figsize = (50,8))
to_plot = sigs[['Symbol', 'log2FoldChange']].set_index('Symbol').sort_values(by = 'log2FoldChange').T
sns.heatmap(to_plot, linecolor ='black', linewidth =0.2)
plt.tight_layout()

filtered_copy = filtered_dox_dau.copy().sort_values(by = 'log2FoldChange')
sigs.sort_values(by = 'log2FoldChange')

plt.scatter(x=sigs['log2FoldChange'],y=sigs['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')

plt.scatter(x=filtered_copy['log2FoldChange'],y=filtered_copy['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of diff exp genes')





dds_doxdau_sigs = drug_name_and_leiden[:, sigs.index]
dds_doxdau_sigs.var['Symbol'] = sigs['Symbol'].values
#dds_doxdau_sigs.layers['log2FoldChange'] = sigs.log2FoldChange.values[:, None]

print(dds_doxdau_sigs)
#grapher = pd.DataFrame(dds_doxdau_sigs['log2FoldChange'].T, index = dds_doxdau_sigs.var_names, columns = dds_doxdau_sigs.obs_names)



"""having trouble labeling the heatmap with the actual gene name (which is now 'Symbol' in the AnnData object"""

sc.pl.heatmap(
    dds_doxdau_sigs,
    var_names=dds_doxdau_sigs.var_names,
    groupby='Drug',  # Adjust this to your desired grouping column
    #gene_symbols='Symbol',  # Use 'Symbol' column for gene labels
    cmap='viridis',
    show=True,
    show_gene_labels=True,
    figsize=(40, 10)
)

dds_doxdau_sigs

"""Comparing dox with daun"""

stat_dox_dau = DeseqStats(drug_name_and_leiden, contrast=('Drug name', 'doxorubicin', 'daunorubicin'))

stat_dox_dau.summary()

stat_dox_dau_df = stat_dox_dau.results_df.copy()
stat_dox_dau_df.insert(0, 'Geneid', label_list)

from mygene import MyGeneInfo


# Initialize MyGeneInfo
mg = MyGeneInfo()


# If your gene IDs are in the first column of df:
gene_ids = stat_dox_dau_df.iloc[:, 0].tolist()


# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')


# Convert results to DataFrame
results_df = pd.DataFrame(results)


# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()


# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']


stat_dox_dau_df[stat_dox_dau_df.columns[0]] = stat_dox_dau_df[stat_dox_dau_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)


# Now merge safely
stat_dox_dau_df_labeled = stat_dox_dau_df.merge(results_df, left_on=stat_dox_dau_df.columns[0], right_on='Geneid', how='left')


#optinally drop the merge key if redundant
#stat_doxanddau_vs_ida_df.drop(columns='Geneid', inplace=True)


filtered_stat_dox_dau_df= stat_dox_dau_df_labeled[stat_dox_dau_df_labeled.baseMean >= 10]
sigs_stat_dox_dau_df = filtered_stat_dox_dau_df[(filtered_stat_dox_dau_df.padj < 0.05) & (abs(filtered_stat_dox_dau_df.log2FoldChange) > 1)]
sigs_stat_dox_dau_df.dropna(subset = 'Symbol', inplace = True)


#filtered_copy_doxanddau_vs_ida = filtered_doxanddau_vs_ida.copy().sort_values(by = 'log2FoldChange')
#sigs_doxanddau_vs_ida.sort_values(by = 'log2FoldChange')


#plt.scatter(x=sigs_doxanddau_vs_ida['log2FoldChange'],y=sigs_doxanddau_vs_ida['padj'].apply(lambda x:-np.log10(x)),s=1)
#plt.xlabel("log2FC")
#plt.ylabel("-log2FC")
#plt.title('volcano plot of significantly diff exp genes')

#plt.scatter(x=filtered_copy_doxanddau_vs_ida['log2FoldChange'],y=filtered_copy_doxanddau_vs_ida['padj'].apply(lambda x:-np.log10(x)),s=1)
#plt.xlabel("log2FC")
#plt.ylabel("-log2FC")
#plt.title('volcano plot of diff exp genes')

sigs_stat_dox_dau_df.shape

"""Comparing DOX and DAU with IDA"""

stat_doxanddau_vs_ida = DeseqStats(drug_name_and_leiden, contrast=('leiden', '1', '2'))

stat_doxanddau_vs_ida.summary()
#stat_doxanddau_vs_ida.results_df.to_csv('stat_doxanddau_vs_ida.csv', index=False)

stat_doxanddau_vs_ida_df = stat_doxanddau_vs_ida.results_df.copy()
stat_doxanddau_vs_ida_df.insert(0, 'Geneid', label_list)

from mygene import MyGeneInfo


# Initialize MyGeneInfo
mg = MyGeneInfo()


# If your gene IDs are in the first column of df:
gene_ids = stat_doxanddau_vs_ida_df.iloc[:, 0].tolist()


# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')


# Convert results to DataFrame
results_df = pd.DataFrame(results)


# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()


# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']


stat_doxanddau_vs_ida_df[stat_doxanddau_vs_ida_df.columns[0]] = stat_doxanddau_vs_ida_df[stat_doxanddau_vs_ida_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)


# Now merge safely
stat_doxanddau_vs_ida_df_labeled = stat_doxanddau_vs_ida_df.merge(results_df, left_on=stat_doxanddau_vs_ida_df.columns[0], right_on='Geneid', how='left')


#optinally drop the merge key if redundant
#stat_doxanddau_vs_ida_df.drop(columns='Geneid', inplace=True)


filtered_doxanddau_vs_ida = stat_doxanddau_vs_ida_df_labeled[stat_doxanddau_vs_ida_df_labeled.baseMean >= 10]
sigs_doxanddau_vs_ida = filtered_doxanddau_vs_ida[(filtered_doxanddau_vs_ida.padj < 0.05) & (abs(filtered_doxanddau_vs_ida.log2FoldChange) > 1)]
sigs_doxanddau_vs_ida.dropna(subset = 'Symbol', inplace = True)


filtered_copy_doxanddau_vs_ida = filtered_doxanddau_vs_ida.copy().sort_values(by = 'log2FoldChange')
sigs_doxanddau_vs_ida.sort_values(by = 'log2FoldChange')


plt.scatter(x=sigs_doxanddau_vs_ida['log2FoldChange'],y=sigs_doxanddau_vs_ida['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')

plt.scatter(x=filtered_copy_doxanddau_vs_ida['log2FoldChange'],y=filtered_copy_doxanddau_vs_ida['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of diff exp genes')

plt.scatter(x=sigs_doxanddau_vs_ida['log2FoldChange'],y=sigs_doxanddau_vs_ida['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')







"""Dox and daun v epi"""

stat_doxanddau_vs_epi = DeseqStats(drug_name_and_leiden, contrast=('leiden', '1', '3'))

stat_doxanddau_vs_epi.summary()

stat_doxanddau_vs_epi_df = stat_doxanddau_vs_epi.results_df.copy()
stat_doxanddau_vs_epi_df.insert(0, 'Geneid', label_list)






from mygene import MyGeneInfo


# Initialize MyGeneInfo
mg = MyGeneInfo()


# If your gene IDs are in the first column of df:
gene_ids = stat_doxanddau_vs_epi_df.iloc[:, 0].tolist()


# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')


# Convert results to DataFrame
results_df = pd.DataFrame(results)


# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()


# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']


stat_doxanddau_vs_epi_df[stat_doxanddau_vs_epi_df.columns[0]] = stat_doxanddau_vs_epi_df[stat_doxanddau_vs_epi_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)


# Now merge safely
stat_doxanddau_vs_epi_df_labeled = stat_doxanddau_vs_epi_df.merge(results_df, left_on=stat_doxanddau_vs_epi_df.columns[0], right_on='Geneid', how='left')


#optinally drop the merge key if redundant
#stat_doxanddau_vs_epi_df.drop(columns='Geneid', inplace=True)


filtered_doxanddau_vs_epi = stat_doxanddau_vs_epi_df_labeled[stat_doxanddau_vs_epi_df_labeled.baseMean >= 10]
sigs_doxanddau_vs_epi = filtered_doxanddau_vs_epi[(filtered_doxanddau_vs_epi.padj < 0.05) & (abs(filtered_doxanddau_vs_epi.log2FoldChange) > 1)]
sigs_doxanddau_vs_epi.dropna(subset = 'Symbol', inplace = True)


filtered_copy_doxanddau_vs_epi = filtered_doxanddau_vs_epi.copy().sort_values(by = 'log2FoldChange')
sigs_doxanddau_vs_epi.sort_values(by = 'log2FoldChange')


plt.scatter(x=sigs_doxanddau_vs_epi['log2FoldChange'],y=sigs_doxanddau_vs_epi['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')

plt.scatter(x=filtered_copy_doxanddau_vs_epi['log2FoldChange'],y=filtered_copy_doxanddau_vs_epi['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of diff exp genes')

filtered_copy_doxanddau_vs_epi
min(sigs_doxanddau_vs_epi.log2FoldChange)

"""dox v ctrl"""

stat_dox = DeseqStats(drug_name_and_leiden, contrast=('Drug name', 'doxorubicin', 'Control'))

stat_dox.summary()

stat_dox_df = stat_dox.results_df.copy()
stat_dox_df.insert(0, 'Geneid', label_list)






from mygene import MyGeneInfo


# Initialize MyGeneInfo
mg = MyGeneInfo()


# If your gene IDs are in the first column of df:
gene_ids = stat_dox_df.iloc[:, 0].tolist()


# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')


# Convert results to DataFrame
results_df = pd.DataFrame(results)


# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()


# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']


stat_dox_df[stat_dox_df.columns[0]] = stat_dox_df[stat_dox_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)


# Now merge safely
stat_dox_df_labeled = stat_dox_df.merge(results_df, left_on=stat_dox_df.columns[0], right_on='Geneid', how='left')


#optinally drop the merge key if redundant
#stat_dox_df.drop(columns='Geneid', inplace=True)


filtered_dox = stat_dox_df_labeled[stat_dox_df_labeled.baseMean >= 10]
sigs_dox = filtered_dox[(filtered_dox.padj < 0.05) & (abs(filtered_dox.log2FoldChange) > 1)]
sigs_dox.dropna(subset = 'Symbol', inplace = True)


filtered_copy_dox = filtered_dox.copy().sort_values(by = 'log2FoldChange')
sigs_dox.sort_values(by = 'log2FoldChange')


plt.scatter(x=sigs_dox['log2FoldChange'],y=sigs_dox['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')

plt.scatter(x=filtered_copy_dox['log2FoldChange'],y=filtered_copy_dox['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of diff exp genes')



stat_dau = DeseqStats(drug_name_and_leiden, contrast=('Drug name', 'daunorubicin', 'Control'))

stat_dau.summary()

stat_dau_df = stat_dau.results_df.copy()
stat_dau_df.insert(0, 'Geneid', label_list)






from mygene import MyGeneInfo


# Initialize MyGeneInfo
mg = MyGeneInfo()


# If your gene IDs are in the first column of df:
gene_ids = stat_dau_df.iloc[:, 0].tolist()


# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')


# Convert results to DataFrame
results_df = pd.DataFrame(results)


# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()


# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']


stat_dau_df[stat_dau_df.columns[0]] = stat_dau_df[stat_dau_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)


# Now merge safely
stat_dau_df_labeled = stat_dau_df.merge(results_df, left_on=stat_dau_df.columns[0], right_on='Geneid', how='left')


#optinally drop the merge key if redundant
#stat_dau_df.drop(columns='Geneid', inplace=True)


filtered_dau = stat_dau_df_labeled[stat_dau_df_labeled.baseMean >= 10]
sigs_dau = filtered_dau[(filtered_dau.padj < 0.05) & (abs(filtered_dau.log2FoldChange) > 1)]
sigs_dau.dropna(subset = 'Symbol', inplace = True)


filtered_copy_dau = filtered_dau.copy().sort_values(by = 'log2FoldChange')
sigs_dau.sort_values(by = 'log2FoldChange')


plt.scatter(x=sigs_dau['log2FoldChange'],y=sigs_dau['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')

plt.scatter(x=filtered_copy_dau['log2FoldChange'],y=filtered_copy_dau['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of diff exp genes')

sigs_dau



stat_epi = DeseqStats(drug_name_and_leiden, contrast=('Drug name', 'epirubicin', 'Control'))
stat_epi.summary()

stat_epi_df = stat_epi.results_df.copy()
stat_epi_df.insert(0, 'Geneid', label_list)






from mygene import MyGeneInfo


# Initialize MyGeneInfo
mg = MyGeneInfo()


# If your gene IDs are in the first column of df:
gene_ids = stat_epi_df.iloc[:, 0].tolist()


# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')


# Convert results to DataFrame
results_df = pd.DataFrame(results)


# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()


# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']


stat_epi_df[stat_epi_df.columns[0]] = stat_epi_df[stat_epi_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)


# Now merge safely
stat_epi_df_labeled = stat_epi_df.merge(results_df, left_on=stat_epi_df.columns[0], right_on='Geneid', how='left')


#optinally drop the merge key if redundant
#stat_epi_df.drop(columns='Geneid', inplace=True)


filtered_epi = stat_epi_df_labeled[stat_epi_df_labeled.baseMean >= 10]
sigs_epi = filtered_epi[(filtered_epi.padj < 0.05) & (abs(filtered_epi.log2FoldChange) > 1)]
sigs_epi.dropna(subset = 'Symbol', inplace = True)


filtered_copy_epi = filtered_epi.copy().sort_values(by = 'log2FoldChange')
sigs_epi.sort_values(by = 'log2FoldChange')


plt.scatter(x=sigs_epi['log2FoldChange'],y=sigs_epi['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')

plt.scatter(x=filtered_copy_epi['log2FoldChange'],y=filtered_copy_epi['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of diff exp genes')

sigs_epi

stat_ida = DeseqStats(drug_name_and_leiden, contrast=('Drug name', 'idarubicin', 'Control'))
stat_ida.summary()

stat_ida_df = stat_ida.results_df.copy()
stat_ida_df.insert(0, 'Geneid', label_list)






from mygene import MyGeneInfo


# Initialize MyGeneInfo
mg = MyGeneInfo()


# If your gene IDs are in the first column of df:
gene_ids = stat_ida_df.iloc[:, 0].tolist()


# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')


# Convert results to DataFrame
results_df = pd.DataFrame(results)


# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()


# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']


stat_ida_df[stat_ida_df.columns[0]] = stat_ida_df[stat_ida_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)


# Now merge safely
stat_ida_df_labeled = stat_ida_df.merge(results_df, left_on=stat_ida_df.columns[0], right_on='Geneid', how='left')


#optinally drop the merge key if redundant
#stat_ida_df.drop(columns='Geneid', inplace=True)


filtered_ida = stat_ida_df_labeled[stat_ida_df_labeled.baseMean >= 10]
sigs_ida = filtered_ida[(filtered_ida.padj < 0.05) & abs(filtered_ida.log2FoldChange) > 0.5]
sigs_ida


filtered_copy_ida = filtered_ida.copy().sort_values(by = 'log2FoldChange')
sigs_ida.sort_values(by = 'log2FoldChange')


plt.scatter(x=sigs_ida['log2FoldChange'],y=sigs_ida['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')

plt.scatter(x=filtered_copy_ida['log2FoldChange'],y=filtered_copy_ida['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of diff exp genes')





class_and_leiden = DeseqDataSet(counts = analysis_Anthracyclines.layers['raw_counts'], metadata = analysis_Anthracyclines.obs, design_factors = ["`Drug class`", "leiden"])

class_and_leiden.deseq2()

stat_anth = DeseqStats(class_and_leiden, contrast=('Drug class', 'Anthracycline', 'Control'))

stat_anth.summary()

stat_anth_df = stat_anth.results_df.copy()
stat_anth_df.insert(0, 'Geneid', label_list)






from mygene import MyGeneInfo


# Initialize MyGeneInfo
mg = MyGeneInfo()


# If your gene IDs are in the first column of df:
gene_ids = stat_anth_df.iloc[:, 0].tolist()


# Query MyGene.info
results = mg.querymany(gene_ids, scopes='entrezgene', fields='symbol', species='human')


# Convert results to DataFrame
results_df = pd.DataFrame(results)


# Some IDs may not be mapped â€” filter out errors or NaNs
results_df = results_df[['query', 'symbol']].dropna()


# Rename columns for merging
results_df.columns = ['Geneid', 'Symbol']


stat_anth_df[stat_anth_df.columns[0]] = stat_anth_df[stat_anth_df.columns[0]].astype(str)
results_df['Geneid'] = results_df['Geneid'].astype(str)


# Now merge safely
stat_anth_df_labeled = stat_anth_df.merge(results_df, left_on=stat_anth_df.columns[0], right_on='Geneid', how='left')


#optinally drop the merge key if redundant
#stat_anth_df.drop(columns='Geneid', inplace=True)


filtered_anth = stat_anth_df_labeled[stat_anth_df_labeled.baseMean >= 10]
sigs_anth = filtered_anth[(filtered_anth.padj < 0.05) & abs(filtered_anth.log2FoldChange) > 0.5]
sigs_anth


filtered_copy_anth = filtered_anth.copy().sort_values(by = 'log2FoldChange')
sigs_anth.sort_values(by = 'log2FoldChange')


plt.scatter(x=sigs_anth['log2FoldChange'],y=sigs_anth['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of significantly diff exp genes')

plt.scatter(x=filtered_copy_anth['log2FoldChange'],y=filtered_copy_anth['padj'].apply(lambda x:-np.log10(x)),s=1)
plt.xlabel("log2FC")
plt.ylabel("-log2FC")
plt.title('volcano plot of diff exp genes')





res_anth = stat_anth.results_df
res_anth

!pip install sanbomics



"""Trying GSEA"""

!pip install gseapy

import gseapy as gp

stat_dau_df_labeled_copy  = stat_dau_df_labeled.copy()
ranking_dau = stat_dau_df_labeled_copy [['Symbol', 'stat']].dropna().sort_values(by = 'stat', ascending = False)
ranking_dau
ranking_dau.drop_duplicates('Symbol')
pre_res_dau = gp.prerank(rnk = ranking_dau, gene_sets = 'GO_Biological_Process_2021', seed = 6, permutation_num = 100)
out_dau = []
for item in list(pre_res_dau.results):
  out_dau.append([pre_res_dau.results[item]['fdr'],
                      pre_res_dau.results[item]['es'],
                      pre_res_dau.results[item]['nes'],
                      pre_res_dau.results[item]['Symbol']
                  ])

out_dau = pd.DataFrame(out_dau, columns = ['Term','fdr', 'es', 'nes']).sort_values('fdr').reset_index(drop = True)
out_dau